{"ast":null,"code":"import _asyncToGenerator from \"X:/capitulo06/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//import { Capacitor } from '@capacitor/core';\n\n/**\n * SQLiteConnection Class\n */\nexport class SQLiteConnection {\n  constructor(sqlite) {\n    this.sqlite = sqlite;\n    this._connectionDict = new Map();\n  }\n\n  initWebStore() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.sqlite.initWebStore();\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  saveToStore(database) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.sqlite.saveToStore({\n          database\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  echo(value) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this3.sqlite.echo({\n          value\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isSecretStored() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this4.sqlite.isSecretStored();\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  setEncryptionSecret(passphrase) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this5.sqlite.setEncryptionSecret({\n          passphrase: passphrase\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  changeEncryptionSecret(passphrase, oldpassphrase) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this6.sqlite.changeEncryptionSecret({\n          passphrase: passphrase,\n          oldpassphrase: oldpassphrase\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  addUpgradeStatement(database, fromVersion, toVersion, statement, set) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const upgrade = {\n        fromVersion,\n        toVersion,\n        statement,\n        set: set ? set : []\n      };\n\n      try {\n        if (database.endsWith('.db')) database = database.slice(0, -3);\n        yield _this7.sqlite.addUpgradeStatement({\n          database,\n          upgrade: [upgrade]\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  createConnection(database, encrypted, mode, version) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        if (database.endsWith('.db')) database = database.slice(0, -3);\n        yield _this8.sqlite.createConnection({\n          database,\n          encrypted,\n          mode,\n          version\n        });\n        const conn = new SQLiteDBConnection(database, _this8.sqlite);\n\n        _this8._connectionDict.set(database, conn);\n\n        return Promise.resolve(conn);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  closeConnection(database) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        if (database.endsWith('.db')) database = database.slice(0, -3);\n        yield _this9.sqlite.closeConnection({\n          database\n        });\n\n        _this9._connectionDict.delete(database);\n\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isConnection(database) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const res = {};\n      if (database.endsWith('.db')) database = database.slice(0, -3);\n      res.result = _this10._connectionDict.has(database);\n      return Promise.resolve(res);\n    })();\n  }\n\n  retrieveConnection(database) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      if (database.endsWith('.db')) database = database.slice(0, -3);\n\n      if (_this11._connectionDict.has(database)) {\n        const conn = _this11._connectionDict.get(database);\n\n        if (typeof conn != 'undefined') return Promise.resolve(conn);else {\n          return Promise.reject(`Connection ${database} is undefined`);\n        }\n      } else {\n        return Promise.reject(`Connection ${database} does not exist`);\n      }\n    })();\n  }\n\n  retrieveAllConnections() {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this12._connectionDict;\n    })();\n  }\n\n  closeAllConnections() {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      const delDict = new Map();\n\n      try {\n        for (const database of _this13._connectionDict.keys()) {\n          yield _this13.sqlite.closeConnection({\n            database\n          });\n          delDict.set(database, null);\n        }\n\n        for (const database of delDict.keys()) {\n          _this13._connectionDict.delete(database);\n        }\n\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  checkConnectionsConsistency() {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const keys = [..._this14._connectionDict.keys()];\n        const res = yield _this14.sqlite.checkConnectionsConsistency({\n          dbNames: keys\n        });\n        if (!res.result) _this14._connectionDict = new Map();\n        return Promise.resolve(res);\n      } catch (err) {\n        _this14._connectionDict = new Map();\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  importFromJson(jsonstring) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const ret = yield _this15.sqlite.importFromJson({\n          jsonstring: jsonstring\n        });\n        return Promise.resolve(ret);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isJsonValid(jsonstring) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const ret = yield _this16.sqlite.isJsonValid({\n          jsonstring: jsonstring\n        });\n        return Promise.resolve(ret);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  copyFromAssets(overwrite) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      const mOverwrite = overwrite != null ? overwrite : true;\n\n      try {\n        yield _this17.sqlite.copyFromAssets({\n          overwrite: mOverwrite\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isDatabase(database) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      if (database.endsWith('.db')) database = database.slice(0, -3);\n\n      try {\n        const res = yield _this18.sqlite.isDatabase({\n          database: database\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  getDatabaseList() {\n    var _this19 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this19.sqlite.getDatabaseList();\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  getMigratableDbList(folderPath) {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!folderPath || folderPath.length === 0) {\n        return Promise.reject('You must provide a folder path');\n      }\n\n      try {\n        const res = yield _this20.sqlite.getMigratableDbList({\n          folderPath: folderPath\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  addSQLiteSuffix(folderPath, dbNameList) {\n    var _this21 = this;\n\n    return _asyncToGenerator(function* () {\n      const path = folderPath ? folderPath : 'default';\n      const dbList = dbNameList ? dbNameList : [];\n\n      try {\n        const res = yield _this21.sqlite.addSQLiteSuffix({\n          folderPath: path,\n          dbNameList: dbList\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  deleteOldDatabases(folderPath, dbNameList) {\n    var _this22 = this;\n\n    return _asyncToGenerator(function* () {\n      const path = folderPath ? folderPath : 'default';\n      const dbList = dbNameList ? dbNameList : [];\n\n      try {\n        const res = yield _this22.sqlite.deleteOldDatabases({\n          folderPath: path,\n          dbNameList: dbList\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n}\n/**\n * SQLiteDBConnection Class\n */\n\nexport class SQLiteDBConnection {\n  constructor(dbName, sqlite) {\n    this.dbName = dbName;\n    this.sqlite = sqlite;\n  }\n\n  getConnectionDBName() {\n    return this.dbName;\n  }\n\n  open() {\n    var _this23 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this23.sqlite.open({\n          database: _this23.dbName\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  close() {\n    var _this24 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this24.sqlite.close({\n          database: _this24.dbName\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  getVersion() {\n    var _this25 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const version = yield _this25.sqlite.getVersion({\n          database: _this25.dbName\n        });\n        return Promise.resolve(version);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  execute(statements, transaction = true) {\n    var _this26 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this26.sqlite.execute({\n          database: _this26.dbName,\n          statements: statements,\n          transaction: transaction\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  query(statement, values) {\n    var _this27 = this;\n\n    return _asyncToGenerator(function* () {\n      let res;\n\n      try {\n        if (values && values.length > 0) {\n          res = yield _this27.sqlite.query({\n            database: _this27.dbName,\n            statement: statement,\n            values: values\n          });\n        } else {\n          res = yield _this27.sqlite.query({\n            database: _this27.dbName,\n            statement: statement,\n            values: []\n          });\n        }\n\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  run(statement, values, transaction = true) {\n    var _this28 = this;\n\n    return _asyncToGenerator(function* () {\n      let res;\n\n      try {\n        if (values && values.length > 0) {\n          res = yield _this28.sqlite.run({\n            database: _this28.dbName,\n            statement: statement,\n            values: values,\n            transaction: transaction\n          }); //        }\n        } else {\n          res = yield _this28.sqlite.run({\n            database: _this28.dbName,\n            statement: statement,\n            values: [],\n            transaction: transaction\n          });\n        }\n\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  executeSet(set, transaction = true) {\n    var _this29 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this29.sqlite.executeSet({\n          database: _this29.dbName,\n          set: set,\n          transaction: transaction\n        }); //      }\n\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isExists() {\n    var _this30 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this30.sqlite.isDBExists({\n          database: _this30.dbName\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isTable(table) {\n    var _this31 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this31.sqlite.isTableExists({\n          database: _this31.dbName,\n          table: table\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isDBOpen() {\n    var _this32 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this32.sqlite.isDBOpen({\n          database: _this32.dbName\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  delete() {\n    var _this33 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this33.sqlite.deleteDatabase({\n          database: _this33.dbName\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  createSyncTable() {\n    var _this34 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this34.sqlite.createSyncTable({\n          database: _this34.dbName\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  setSyncDate(syncdate) {\n    var _this35 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this35.sqlite.setSyncDate({\n          database: _this35.dbName,\n          syncdate: syncdate\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  getSyncDate() {\n    var _this36 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this36.sqlite.getSyncDate({\n          database: _this36.dbName\n        });\n        let retDate = '';\n        if (res.syncDate > 0) retDate = new Date(res.syncDate * 1000).toISOString();\n        return Promise.resolve(retDate);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  exportToJson(mode) {\n    var _this37 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this37.sqlite.exportToJson({\n          database: _this37.dbName,\n          jsonexportmode: mode\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n}","map":{"version":3,"sources":["X:/capitulo06/node_modules/@capacitor-community/sqlite/dist/esm/definitions.js"],"names":["SQLiteConnection","constructor","sqlite","_connectionDict","Map","initWebStore","Promise","resolve","err","reject","saveToStore","database","echo","value","res","isSecretStored","setEncryptionSecret","passphrase","changeEncryptionSecret","oldpassphrase","addUpgradeStatement","fromVersion","toVersion","statement","set","upgrade","endsWith","slice","createConnection","encrypted","mode","version","conn","SQLiteDBConnection","closeConnection","delete","isConnection","result","has","retrieveConnection","get","retrieveAllConnections","closeAllConnections","delDict","keys","checkConnectionsConsistency","dbNames","importFromJson","jsonstring","ret","isJsonValid","copyFromAssets","overwrite","mOverwrite","isDatabase","getDatabaseList","getMigratableDbList","folderPath","length","addSQLiteSuffix","dbNameList","path","dbList","deleteOldDatabases","dbName","getConnectionDBName","open","close","getVersion","execute","statements","transaction","query","values","run","executeSet","isExists","isDBExists","isTable","table","isTableExists","isDBOpen","deleteDatabase","createSyncTable","setSyncDate","syncdate","getSyncDate","retDate","syncDate","Date","toISOString","exportToJson","jsonexportmode"],"mappings":"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","sourcesContent":["//import { Capacitor } from '@capacitor/core';\n/**\n * SQLiteConnection Class\n */\nexport class SQLiteConnection {\n    constructor(sqlite) {\n        this.sqlite = sqlite;\n        this._connectionDict = new Map();\n    }\n    async initWebStore() {\n        try {\n            await this.sqlite.initWebStore();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async saveToStore(database) {\n        try {\n            await this.sqlite.saveToStore({ database });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async echo(value) {\n        try {\n            const res = await this.sqlite.echo({ value });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isSecretStored() {\n        try {\n            const res = await this.sqlite.isSecretStored();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setEncryptionSecret(passphrase) {\n        try {\n            await this.sqlite.setEncryptionSecret({ passphrase: passphrase });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async changeEncryptionSecret(passphrase, oldpassphrase) {\n        try {\n            await this.sqlite.changeEncryptionSecret({\n                passphrase: passphrase,\n                oldpassphrase: oldpassphrase,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async addUpgradeStatement(database, fromVersion, toVersion, statement, set) {\n        const upgrade = {\n            fromVersion,\n            toVersion,\n            statement,\n            set: set ? set : [],\n        };\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.addUpgradeStatement({\n                database,\n                upgrade: [upgrade],\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createConnection(database, encrypted, mode, version) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.createConnection({\n                database,\n                encrypted,\n                mode,\n                version,\n            });\n            const conn = new SQLiteDBConnection(database, this.sqlite);\n            this._connectionDict.set(database, conn);\n            return Promise.resolve(conn);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async closeConnection(database) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.closeConnection({ database });\n            this._connectionDict.delete(database);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isConnection(database) {\n        const res = {};\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        res.result = this._connectionDict.has(database);\n        return Promise.resolve(res);\n    }\n    async retrieveConnection(database) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        if (this._connectionDict.has(database)) {\n            const conn = this._connectionDict.get(database);\n            if (typeof conn != 'undefined')\n                return Promise.resolve(conn);\n            else {\n                return Promise.reject(`Connection ${database} is undefined`);\n            }\n        }\n        else {\n            return Promise.reject(`Connection ${database} does not exist`);\n        }\n    }\n    async retrieveAllConnections() {\n        return this._connectionDict;\n    }\n    async closeAllConnections() {\n        const delDict = new Map();\n        try {\n            for (const database of this._connectionDict.keys()) {\n                await this.sqlite.closeConnection({ database });\n                delDict.set(database, null);\n            }\n            for (const database of delDict.keys()) {\n                this._connectionDict.delete(database);\n            }\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async checkConnectionsConsistency() {\n        try {\n            const keys = [...this._connectionDict.keys()];\n            const res = await this.sqlite.checkConnectionsConsistency({ dbNames: keys });\n            if (!res.result)\n                this._connectionDict = new Map();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            this._connectionDict = new Map();\n            return Promise.reject(err);\n        }\n    }\n    async importFromJson(jsonstring) {\n        try {\n            const ret = await this.sqlite.importFromJson({ jsonstring: jsonstring });\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isJsonValid(jsonstring) {\n        try {\n            const ret = await this.sqlite.isJsonValid({ jsonstring: jsonstring });\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async copyFromAssets(overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.copyFromAssets({ overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDatabase(database) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        try {\n            const res = await this.sqlite.isDatabase({ database: database });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getDatabaseList() {\n        try {\n            const res = await this.sqlite.getDatabaseList();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getMigratableDbList(folderPath) {\n        if (!folderPath || folderPath.length === 0) {\n            return Promise.reject('You must provide a folder path');\n        }\n        try {\n            const res = await this.sqlite.getMigratableDbList({\n                folderPath: folderPath,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async addSQLiteSuffix(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        try {\n            const res = await this.sqlite.addSQLiteSuffix({\n                folderPath: path,\n                dbNameList: dbList,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteOldDatabases(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        try {\n            const res = await this.sqlite.deleteOldDatabases({\n                folderPath: path,\n                dbNameList: dbList,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\n/**\n * SQLiteDBConnection Class\n */\nexport class SQLiteDBConnection {\n    constructor(dbName, sqlite) {\n        this.dbName = dbName;\n        this.sqlite = sqlite;\n    }\n    getConnectionDBName() {\n        return this.dbName;\n    }\n    async open() {\n        try {\n            await this.sqlite.open({ database: this.dbName });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async close() {\n        try {\n            await this.sqlite.close({ database: this.dbName });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getVersion() {\n        try {\n            const version = await this.sqlite.getVersion({\n                database: this.dbName,\n            });\n            return Promise.resolve(version);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async execute(statements, transaction = true) {\n        try {\n            const res = await this.sqlite.execute({\n                database: this.dbName,\n                statements: statements,\n                transaction: transaction,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async query(statement, values) {\n        let res;\n        try {\n            if (values && values.length > 0) {\n                res = await this.sqlite.query({\n                    database: this.dbName,\n                    statement: statement,\n                    values: values,\n                });\n            }\n            else {\n                res = await this.sqlite.query({\n                    database: this.dbName,\n                    statement: statement,\n                    values: [],\n                });\n            }\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async run(statement, values, transaction = true) {\n        let res;\n        try {\n            if (values && values.length > 0) {\n                res = await this.sqlite.run({\n                    database: this.dbName,\n                    statement: statement,\n                    values: values,\n                    transaction: transaction,\n                });\n                //        }\n            }\n            else {\n                res = await this.sqlite.run({\n                    database: this.dbName,\n                    statement: statement,\n                    values: [],\n                    transaction: transaction,\n                });\n            }\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async executeSet(set, transaction = true) {\n        try {\n            const res = await this.sqlite.executeSet({\n                database: this.dbName,\n                set: set,\n                transaction: transaction,\n            });\n            //      }\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isExists() {\n        try {\n            const res = await this.sqlite.isDBExists({\n                database: this.dbName,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isTable(table) {\n        try {\n            const res = await this.sqlite.isTableExists({\n                database: this.dbName,\n                table: table,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDBOpen() {\n        try {\n            const res = await this.sqlite.isDBOpen({\n                database: this.dbName,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async delete() {\n        try {\n            await this.sqlite.deleteDatabase({ database: this.dbName });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createSyncTable() {\n        try {\n            const res = await this.sqlite.createSyncTable({\n                database: this.dbName,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setSyncDate(syncdate) {\n        try {\n            await this.sqlite.setSyncDate({\n                database: this.dbName,\n                syncdate: syncdate,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getSyncDate() {\n        try {\n            const res = await this.sqlite.getSyncDate({\n                database: this.dbName,\n            });\n            let retDate = '';\n            if (res.syncDate > 0)\n                retDate = new Date(res.syncDate * 1000).toISOString();\n            return Promise.resolve(retDate);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async exportToJson(mode) {\n        try {\n            const res = await this.sqlite.exportToJson({\n                database: this.dbName,\n                jsonexportmode: mode,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}